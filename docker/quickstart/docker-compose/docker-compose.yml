# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
# Ссылка на описание версий Docker Compose (https://docs.docker.com/compose/compose-file/)
version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: launchpad # Use an image built from the specified dockerfile in the `launchpad` directory.
      dockerfile: Dockerfile
    ports:
      - "8888:8888" # Forward the exposed port 8888 on the container to port 8888 on the host machine
    restart: always
    environment:
      DATABASE_NAME: mh
      DATABASE_USER: mh
      DATABASE_PASSWORD: mh123
    depends_on: 
      - db # This service depends on mysql. Start that first.
    networks:
      testing_net:
        ipv4_address: 172.28.1.3
#    networks: # Networks to join (Services on the same network can communicate with each other using their name)
#      - backend
#      - frontend

  # Frontend Service 
  app-client:
    build:
      context: web-client # Use an image built from the specified dockerfile in the `web-client` directory.
      dockerfile: Dockerfile
    ports:
      - "4200:80" # Forward the exposed port 80 on the container to port 4200 on the host machine
    restart: always
    networks:
      testing_net:
        ipv4_address: 172.28.1.4
#    networks:
#      - frontend  

  # Database Service (Mysql)
  db:
    image: mysql:8.0.18
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: mh
      MYSQL_USER: mh
      MYSQL_PASSWORD: mh123
      MYSQL_ROOT_PASSWORD: mh123123
    volumes:
      - /d/_Work/Docker-Compose/db-data:/var/lib/mysql
      - /d/_Work/Docker-Compose/mysql-dump:/docker-entrypoint-initdb.d
    networks:
      testing_net:
        ipv4_address: 172.28.1.2
#    networks:
#      - backend  
  
# Volumes
volumes:
  db-data:
  mysql-dump:

# Networks to be created to facilitate communication between containers
networks:
  testing_net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
# Networks to be created to facilitate communication between containers
#networks:
#  backend:
#  frontend: